{"ast":null,"code":"var _jsxFileName = \"/Users/bdedafoe/Desktop/API_Views/react_examples/src/components/stockChart.js\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport moment from \"moment\";\nimport { CRYPTO_COMPARE } from \"../keys\";\nimport { TradingViewEmbed, widgetType } from \"react-tradingview-embed\";\nimport { XYPlot, Hint, LineSeries, FlexibleXYPlot, VerticalBarSeries, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, AreaSeries } from \"react-vis\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar formatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\"\n\n  // These options are needed to round to whole numbers if that's what you want.\n  //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n  //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n});\n\nclass StockChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      times: [],\n      high: [],\n      low: [],\n      chartData: [],\n      query: \"BTC\",\n      leaderboard: [],\n      addressData: \"\",\n      symbol: \"\"\n    };\n    this.loadChartData = async () => {\n      const response = await fetch(`https://min-api.cryptocompare.com/data/blockchain/histo/day?fsym=${this.state.query}&api_key=${CRYPTO_COMPARE}&limit=30`);\n      const data = await response.json();\n      const bulkData = data.Data.Data;\n      const dataArray = [];\n      {\n        //this needs to be updated to time, active_addresses, average_transaction_value, current_supply, new_addresses,\n        // symbol, transaction_count, transaction_count_all_time\n        // bulkData.map((y) =>\n        //   dataArray.push({\n        //     time: y.time,\n        //     active_addresses: y.active_addresses,\n        //     average_transaction_value: y.average_transaction_value,\n        //     current_supply: y.current_supply,\n        //     symbol: y.symbol,\n        //     transaction_count: y.transaction_count,\n        //     transaction_count_all_time: y.transaction_count_all_time\n        //   })\n        // );\n        bulkData.map(y => dataArray.push({\n          x: y.time * 1000,\n          y: y.transaction_count * y.average_transaction_value\n        }));\n      }\n      this.setState({\n        chartData: dataArray\n      });\n      this.setState({\n        symbol: this.state.query\n      });\n    };\n    this.handleInputChange = () => {\n      this.setState({\n        query: this.search.value\n      });\n    };\n  }\n  componentDidMount() {\n    this.loadChartData();\n  }\n  render() {\n    const {\n      chartData,\n      query,\n      addressData,\n      symbol\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputDiv\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Search for a symbol\",\n          ref: input => this.search = input,\n          onChange: this.handleInputChange,\n          className: \"dataRequest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.loadChartData,\n          className: \"dataRequest\",\n          children: \"Load Onchain Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TradingViewEmbed, {\n          widgetType: widgetType.TICKER_TAPE,\n          widgetConfig: {\n            showSymbolLogo: true,\n            isTransparent: true,\n            displayMode: \"adaptive\",\n            colorTheme: \"dark\",\n            autosize: true,\n            symbols: [{\n              proName: \"BITSTAMP:ETHUSD\",\n              title: \"ETH/USD\"\n            }, {\n              proName: \"BITSTAMP:BTCUSD\",\n              title: \"BTC/USD\"\n            }, {\n              proName: \"BINANCE:BNBUSDT\",\n              title: \"BNB/USDT\"\n            }, {\n              proName: \"BINANCE:ADAUSD\",\n              title: \"ADA/USD\"\n            }, {\n              proName: \"BINANCE:DOTUSDT\",\n              title: \"DOT/USDT\"\n            }, {\n              proName: \"UNISWAP:UNIUSDT\",\n              title: \"UNI/USDT\"\n            }]\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"charty\",\n        children: [query.length > 2 ? /*#__PURE__*/_jsxDEV(TradingViewEmbed, {\n          widgetType: widgetType.ADVANCED_CHART,\n          widgetConfig: {\n            interval: \"1D\",\n            colorTheme: \"dark\",\n            width: \"100%\",\n            symbol: query + \"USD\",\n            studies: [\"MACD@tv-basicstudies\", \"StochasticRSI@tv-basicstudies\", \"TripleEMA@tv-basicstudies\"]\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this) : \"BTCUSD\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"taChart\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"addressHover\",\n            children: /*#__PURE__*/_jsxDEV(HoverHint, {\n              data: addressData,\n              query: this.state.query,\n              symbol: this.state.symbol\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FlexibleXYPlot, {\n            className: \"onChainChart\",\n            height: 400,\n            children: [/*#__PURE__*/_jsxDEV(VerticalBarSeries, {\n              data: chartData,\n              opacity: 0.3,\n              color: \"#40FEFF\",\n              onNearestX: (datapoint, event) => {\n                this.setState({\n                  addressData: {\n                    time: new Date(datapoint.x).toLocaleDateString(),\n                    price: datapoint.y\n                  }\n                });\n                console.log(addressData);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              tickFormat: value => new Date(value).toLocaleDateString().split(\" \"),\n              tickValues: chartData.x,\n              title: \"Dates\",\n              style: {\n                line: {\n                  stroke: \"#ffffff\"\n                },\n                ticks: {\n                  stroke: \"#ffffff\"\n                },\n                text: {\n                  stroke: \"none\",\n                  fill: \"#ffffff\",\n                  fontWeight: 3,\n                  fontSize: 8,\n                  position: \"start\"\n                },\n                title: {\n                  fill: \"#ffffff\"\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              tickFormat: value => value / 1,\n              width: 40,\n              tickValues: chartData.y\n              // title={\"Active Number of Addresses\"}\n              ,\n              style: {\n                line: {\n                  stroke: \"#ffffff\",\n                  marginRight: 50\n                },\n                ticks: {\n                  stroke: \"#fffff\"\n                },\n                text: {\n                  stroke: \"none\",\n                  fill: \"#ffffff\",\n                  fontWeight: 3,\n                  fontSize: 7,\n                  position: \"start\"\n                },\n                title: {\n                  fill: \"#ffffff\"\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), query.length > 2 ? /*#__PURE__*/_jsxDEV(TradingViewEmbed, {\n            widgetType: widgetType.TECHNICAL_ANALYSIS,\n            widgetConfig: {\n              interval: \"1D\",\n              colorTheme: \"dark\",\n              width: \"100%\",\n              symbol: query + \"USD\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this) : query, query.length > 2 ? /*#__PURE__*/_jsxDEV(TradingViewEmbed, {\n            widgetType: widgetType.COMPANY_PROFILE,\n            widgetConfig: {\n              colorTheme: \"dark\",\n              width: \"100%\",\n              symbol: query + \"USD\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this) : \"BTCUSD\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), chartData.map(x => /*#__PURE__*/_jsxDEV(Chart, {\n        time: x.x,\n        symbol: x.key,\n        active_addresses: x.y\n        // average_transaction_value={x.average_transaction_value}\n        // current_supply={x.current_supply}\n        // transaction_count={x.transaction_count}\n        // transaction_count_all_time={x.transaction_count_all_time}\n      }, x.x, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  }\n}\nconst Chart = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chart-data\",\n        children: \"time\" + props.time\n      }, props.time, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chart-data\",\n        children: \"active addresses\" + props.active_addresses\n      }, props.active_addresses, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 5\n  }, this);\n};\n_c = Chart;\nconst Leader = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"leaderItem\",\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      href: props.url,\n      target: \"#\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: props.logo,\n        alt: props.symbol,\n        className: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"leaderText\",\n      children: props.symbol\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"leaderText\",\n      children: props.price\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 306,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Leader;\nconst HoverHint = _ref => {\n  let {\n    active,\n    data,\n    query,\n    symbol\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `nonActive ${active ? \"active\" : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"hoverData\",\n      children: data.length > 1 ? query : symbol.toUpperCase() + \"  - Raw Averaged Volume (Transactions * Average Value $USD)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"hoverData\",\n      children: [data.length < 1 ? \"\" : data.time + \" - \" + formatter.format(data.price), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 3\n  }, this);\n};\n_c3 = HoverHint;\nexport default StockChart;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Chart\");\n$RefreshReg$(_c2, \"Leader\");\n$RefreshReg$(_c3, \"HoverHint\");","map":{"version":3,"names":["React","render","moment","CRYPTO_COMPARE","TradingViewEmbed","widgetType","XYPlot","Hint","LineSeries","FlexibleXYPlot","VerticalBarSeries","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","AreaSeries","formatter","Intl","NumberFormat","style","currency","StockChart","Component","constructor","props","state","times","high","low","chartData","query","leaderboard","addressData","symbol","loadChartData","response","fetch","data","json","bulkData","Data","dataArray","map","y","push","x","time","transaction_count","average_transaction_value","setState","handleInputChange","search","value","componentDidMount","input","TICKER_TAPE","showSymbolLogo","isTransparent","displayMode","colorTheme","autosize","symbols","proName","title","length","ADVANCED_CHART","interval","width","studies","datapoint","event","Date","toLocaleDateString","price","console","log","split","line","stroke","ticks","text","fill","fontWeight","fontSize","position","marginRight","TECHNICAL_ANALYSIS","COMPANY_PROFILE","key","Chart","active_addresses","Leader","url","logo","HoverHint","active","toUpperCase","format"],"sources":["/Users/bdedafoe/Desktop/API_Views/react_examples/src/components/stockChart.js"],"sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport moment from \"moment\";\nimport { CRYPTO_COMPARE } from \"../keys\";\nimport { TradingViewEmbed, widgetType } from \"react-tradingview-embed\";\n\nimport {\n  XYPlot,\n  Hint,\n  LineSeries,\n  FlexibleXYPlot,\n  VerticalBarSeries,\n  VerticalGridLines,\n  HorizontalGridLines,\n  XAxis,\n  YAxis,\n  AreaSeries\n} from \"react-vis\";\n\nvar formatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\"\n\n  // These options are needed to round to whole numbers if that's what you want.\n  //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n  //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n});\n\nclass StockChart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  state = {\n    times: [],\n    high: [],\n    low: [],\n    chartData: [],\n    query: \"BTC\",\n    leaderboard: [],\n    addressData: \"\",\n    symbol: \"\"\n  };\n\n  componentDidMount() {\n    this.loadChartData();\n  }\n\n  loadChartData = async () => {\n    const response = await fetch(\n      `https://min-api.cryptocompare.com/data/blockchain/histo/day?fsym=${this.state.query}&api_key=${CRYPTO_COMPARE}&limit=30`\n    );\n    const data = await response.json();\n    const bulkData = data.Data.Data;\n    const dataArray = [];\n    {\n      //this needs to be updated to time, active_addresses, average_transaction_value, current_supply, new_addresses,\n      // symbol, transaction_count, transaction_count_all_time\n      // bulkData.map((y) =>\n      //   dataArray.push({\n      //     time: y.time,\n      //     active_addresses: y.active_addresses,\n      //     average_transaction_value: y.average_transaction_value,\n      //     current_supply: y.current_supply,\n      //     symbol: y.symbol,\n      //     transaction_count: y.transaction_count,\n      //     transaction_count_all_time: y.transaction_count_all_time\n      //   })\n      // );\n      bulkData.map((y) =>\n        dataArray.push({\n          x: y.time * 1000,\n          y: y.transaction_count * y.average_transaction_value\n        })\n      );\n    }\n    this.setState({ chartData: dataArray });\n    this.setState({ symbol: this.state.query });\n  };\n\n  handleInputChange = () => {\n    this.setState({\n      query: this.search.value\n    });\n  };\n  render() {\n    const { chartData, query, addressData, symbol } = this.state;\n\n    return (\n      <div>\n        <div className=\"inputDiv\">\n          <input\n            placeholder=\"Search for a symbol\"\n            ref={(input) => (this.search = input)}\n            onChange={this.handleInputChange}\n            className=\"dataRequest\"\n          />\n          <button onClick={this.loadChartData} className=\"dataRequest\">\n            Load Onchain Data\n          </button>\n          {/* <div className=\"leaderboard\">\n          {leaderboard.map((x) => (\n            <Leader\n              key={x.symbol}\n              symbol={x.symbol}\n              price={x.price}\n              logo={x.logo}\n              url={x.url}\n              className=\"leader\"\n            />\n          ))}\n        </div> */}\n          <TradingViewEmbed\n            widgetType={widgetType.TICKER_TAPE}\n            widgetConfig={{\n              showSymbolLogo: true,\n              isTransparent: true,\n              displayMode: \"adaptive\",\n              colorTheme: \"dark\",\n              autosize: true,\n              symbols: [\n                {\n                  proName: \"BITSTAMP:ETHUSD\",\n                  title: \"ETH/USD\"\n                },\n                {\n                  proName: \"BITSTAMP:BTCUSD\",\n                  title: \"BTC/USD\"\n                },\n                {\n                  proName: \"BINANCE:BNBUSDT\",\n                  title: \"BNB/USDT\"\n                },\n                {\n                  proName: \"BINANCE:ADAUSD\",\n                  title: \"ADA/USD\"\n                },\n                {\n                  proName: \"BINANCE:DOTUSDT\",\n                  title: \"DOT/USDT\"\n                },\n                {\n                  proName: \"UNISWAP:UNIUSDT\",\n                  title: \"UNI/USDT\"\n                }\n              ]\n            }}\n          />\n        </div>\n        <div className=\"charty\">\n          {query.length > 2 ? (\n            <TradingViewEmbed\n              widgetType={widgetType.ADVANCED_CHART}\n              widgetConfig={{\n                interval: \"1D\",\n                colorTheme: \"dark\",\n                width: \"100%\",\n                symbol: query + \"USD\",\n                studies: [\n                  \"MACD@tv-basicstudies\",\n                  \"StochasticRSI@tv-basicstudies\",\n                  \"TripleEMA@tv-basicstudies\"\n                ]\n              }}\n            />\n          ) : (\n            \"BTCUSD\"\n          )}\n\n          <div className=\"taChart\">\n            <div className=\"addressHover\">\n              <HoverHint\n                data={addressData}\n                query={this.state.query}\n                symbol={this.state.symbol}\n              />\n              {/* <p className=\"hoverData\">{addressData.length > 1 ? query : symbol}</p>\n            <p className=\"hoverData\">{addressData.length > 1 ? \"Date\" + addressData.time : addressData.time}</p>\n            <p className=\"hoverData\">{addressData.length > 1 ? \"Number of Addresses\" + addressData.price : addressData.price}</p> */}\n            </div>\n            <FlexibleXYPlot className=\"onChainChart\" height={400}>\n              <VerticalBarSeries\n                data={chartData}\n                opacity={0.3}\n                color={\"#40FEFF\"}\n                onNearestX={(datapoint, event) => {\n                  this.setState({\n                    addressData: {\n                      time: new Date(datapoint.x).toLocaleDateString(),\n                      price: datapoint.y\n                    }\n                  });\n                  console.log(addressData);\n                }}\n              />\n\n              <VerticalGridLines />\n              <HorizontalGridLines />\n              <XAxis\n                tickFormat={(value) =>\n                  new Date(value).toLocaleDateString().split(\" \")\n                }\n                tickValues={chartData.x}\n                title={\"Dates\"}\n                style={{\n                  line: { stroke: \"#ffffff\" },\n                  ticks: { stroke: \"#ffffff\" },\n                  text: {\n                    stroke: \"none\",\n                    fill: \"#ffffff\",\n                    fontWeight: 3,\n                    fontSize: 8,\n                    position: \"start\"\n                  },\n                  title: { fill: \"#ffffff\" }\n                }}\n              />\n              <YAxis\n                tickFormat={(value) => value / 1}\n                width={40}\n                tickValues={chartData.y}\n                // title={\"Active Number of Addresses\"}\n                style={{\n                  line: { stroke: \"#ffffff\", marginRight: 50 },\n                  ticks: { stroke: \"#fffff\" },\n                  text: {\n                    stroke: \"none\",\n                    fill: \"#ffffff\",\n                    fontWeight: 3,\n                    fontSize: 7,\n                    position: \"start\"\n                  },\n                  title: { fill: \"#ffffff\" }\n                }}\n              />\n            </FlexibleXYPlot>\n            {query.length > 2 ? (\n              <TradingViewEmbed\n                widgetType={widgetType.TECHNICAL_ANALYSIS}\n                widgetConfig={{\n                  interval: \"1D\",\n                  colorTheme: \"dark\",\n                  width: \"100%\",\n                  symbol: query + \"USD\"\n                }}\n              />\n            ) : (\n              query\n            )}\n\n            {query.length > 2 ? (\n              <TradingViewEmbed\n                widgetType={widgetType.COMPANY_PROFILE}\n                widgetConfig={{\n                  colorTheme: \"dark\",\n                  width: \"100%\",\n                  symbol: query + \"USD\"\n                }}\n              />\n            ) : (\n              \"BTCUSD\"\n            )}\n          </div>\n        </div>\n\n        {chartData.map((x) => (\n          <Chart\n            key={x.x}\n            time={x.x}\n            symbol={x.key}\n            active_addresses={x.y}\n            // average_transaction_value={x.average_transaction_value}\n            // current_supply={x.current_supply}\n            // transaction_count={x.transaction_count}\n            // transaction_count_all_time={x.transaction_count_all_time}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nconst Chart = (props) => {\n  return (\n    <div>\n      <div className=\"chart\">\n        <p className=\"chart-data\" key={props.time}>\n          {\"time\" + props.time}\n        </p>\n        <p className=\"chart-data\" key={props.active_addresses}>\n          {\"active addresses\" + props.active_addresses}\n        </p>\n        {/* <p className=\"chart-data\">{moment(props.time * 1000).format(\"L\")}</p>\n        <p className=\"chart-data\">{'Average Transaction ' + props.average_transaction_value}</p>\n        <p className=\"chart-data\">{'Active Addresses ' + props.active_addresses}</p>\n        <p className=\"chart-data\">{'Current Supply ' + props.current_supply}</p>\n        <p className=\"chart-data\">{'Transaction Count ' + props.transaction_count}</p>\n        <p className=\"chart-data\">{'Transaction Count All Time ' + props.transaction_count_all_time}</p> */}\n      </div>\n    </div>\n  );\n};\n\nconst Leader = (props) => {\n  return (\n    <div className=\"leaderItem\">\n      <a href={props.url} target=\"#\">\n        <img src={props.logo} alt={props.symbol} className=\"logo\" />\n      </a>\n      <p className=\"leaderText\">{props.symbol}</p>\n      <p className=\"leaderText\">{props.price}</p>\n    </div>\n  );\n};\n\nconst HoverHint = ({ active, data, query, symbol }) => (\n  <div className={`nonActive ${active ? \"active\" : \"\"}`}>\n    <p className=\"hoverData\">\n      {data.length > 1\n        ? query\n        : symbol.toUpperCase() +\n          \"  - Raw Averaged Volume (Transactions * Average Value $USD)\"}\n    </p>\n    <p className=\"hoverData\">\n      {data.length < 1 ? \"\" : data.time + \" - \" + formatter.format(data.price)}{\" \"}\n    </p>\n    {/* <p className=\"hoverData\">{data.length > 1 ? \"Number of Addresses\" + data.price : data.price}</p> */}\n  </div>\n);\n\nexport default StockChart;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}