{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Drink from '../components/Drinks';\n\n// const Drinks_API = () => {\n\n//   const [drink, setDrinks] = useState([]);\n//   const [search, setSearch] = useState(\"\");\n//   const [query, setQuery] = useState(\"\");\n\n//   useEffect( () => {\n//     getDrinks()\n//   }, [query])\n\n//   const getDrinks = async () => {\n//     const response = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${query}`)\n//     const data = await response.json()\n//     setDrinks(data.drinks) \n//   }\n\n//   const updateSearch = (e) => {\n//     setSearch(e.target.value)\n//   }\n\n//   const getSearch = (e) => {\n//     e.preventDefault()\n//     setQuery(search)\n//     setSearch('')\n//   }\n\n//   return (\n\n//     <div className=\"App\">\n//       <br></br>\n//         <h3>Search for a cocktail by alcohol type</h3>\n//         <form onSubmit={getSearch} className=\"search-form\">\n//         <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch}></input>\n//         <button className=\"search-button\" type=\"submit\">Search</button>\n//       </form>\n//       <div className=\"drinks\">\n//       {drink.map(drinks => (\n//         <Drink  \n//         key={drinks.strDrink} \n//         name={drinks.strDrink} \n//         image={drinks.strDrinkThumb} \n//         />\n\n//       ))}\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default Drinks_API;\n\nconst Drinks_API = props => {\n  _s();\n  const [isLoading, setLoading] = useState(false);\n  const [cocktails, setCocktails] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(''); // holds an error message in case the network request dosn't succeed\n  const [cocktailNames, setCocktailNames] = useState(['margarita', 'martini']); // the search queries for the `s` parameter at your API endpoint\n\n  useEffect(() => {\n    const fetchCocktailLists = async function () {\n      const fetchCocktailList = async cocktailName => {\n        const baseUrl = 'https://www.thecocktaildb.com/api/json/v1/1/search.php';\n        const url = new URL(baseUrl);\n        const params = new URLSearchParams({\n          s: cocktailName\n        });\n        url.search = params.toString(); // -> '?s=cocktailName'\n        const res = await fetch(url.href); // -> 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s=cocktailName'\n        const data = await res.json();\n        const {\n          drinks: drinkList\n        } = data; // destructured form of: const drinkList = data.drinks;\n        return drinkList;\n      };\n      setLoading(true);\n      try {\n        const promises = [];\n        for (var _len = arguments.length, cocktailNames = new Array(_len), _key = 0; _key < _len; _key++) {\n          cocktailNames[_key] = arguments[_key];\n        }\n        for (const cocktailName of cocktailNames) {\n          promises.push(fetchCocktailList(cocktailName));\n        }\n        const drinkLists = await Promise.all(promises); // -> [[drink1, drink2], [drink3, drink4]]\n        const allDrinks = drinkLists.flat(1); // -> [drink1, drink2, drink3, drink4]\n        setCocktails(allDrinks);\n      } catch (err) {\n        setErrorMessage(err.message /* or whatever custom message you want */);\n      }\n\n      setLoading(false);\n    };\n    fetchCocktailLists(...cocktailNames);\n  }, [cocktailNames, setCocktails, setErrorMessage, setLoading]);\n};\n_s(Drinks_API, \"mIcYpxjghV1+qnUh3Pv5ZeGsXR4=\");\n_c = Drinks_API;\nexport default Drinks_API;\nvar _c;\n$RefreshReg$(_c, \"Drinks_API\");","map":{"version":3,"names":["React","useEffect","useState","Drink","Drinks_API","props","isLoading","setLoading","cocktails","setCocktails","errorMessage","setErrorMessage","cocktailNames","setCocktailNames","fetchCocktailLists","fetchCocktailList","cocktailName","baseUrl","url","URL","params","URLSearchParams","s","search","toString","res","fetch","href","data","json","drinks","drinkList","promises","push","drinkLists","Promise","all","allDrinks","flat","err","message"],"sources":["/Users/bdedafoe/Desktop/API_Views/react_examples/src/views/drinksAPI.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Drink from '../components/Drinks';\n\n\n// const Drinks_API = () => {\n\n//   const [drink, setDrinks] = useState([]);\n//   const [search, setSearch] = useState(\"\");\n//   const [query, setQuery] = useState(\"\");\n\n//   useEffect( () => {\n//     getDrinks()\n//   }, [query])\n\n//   const getDrinks = async () => {\n//     const response = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${query}`)\n//     const data = await response.json()\n//     setDrinks(data.drinks) \n//   }\n\n//   const updateSearch = (e) => {\n//     setSearch(e.target.value)\n//   }\n\n//   const getSearch = (e) => {\n//     e.preventDefault()\n//     setQuery(search)\n//     setSearch('')\n//   }\n\n//   return (\n    \n//     <div className=\"App\">\n//       <br></br>\n//         <h3>Search for a cocktail by alcohol type</h3>\n//         <form onSubmit={getSearch} className=\"search-form\">\n//         <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch}></input>\n//         <button className=\"search-button\" type=\"submit\">Search</button>\n//       </form>\n//       <div className=\"drinks\">\n//       {drink.map(drinks => (\n//         <Drink  \n//         key={drinks.strDrink} \n//         name={drinks.strDrink} \n//         image={drinks.strDrinkThumb} \n//         />\n     \n//       ))}\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default Drinks_API;\n\n\nconst Drinks_API = (props) => {\n    const [isLoading, setLoading] = useState(false);\n    const [cocktails, setCocktails] = useState([]);\n    const [errorMessage, setErrorMessage] = useState(''); // holds an error message in case the network request dosn't succeed\n    const [cocktailNames, setCocktailNames] = useState(['margarita', 'martini']); // the search queries for the `s` parameter at your API endpoint\n  \n    useEffect(() => {\n      const fetchCocktailLists = async (...cocktailNames) => {\n        const fetchCocktailList = async (cocktailName) => {\n          const baseUrl = 'https://www.thecocktaildb.com/api/json/v1/1/search.php';\n          const url = new URL(baseUrl);\n          const params = new URLSearchParams({s: cocktailName});\n          url.search = params.toString(); // -> '?s=cocktailName'\n          const res = await fetch(url.href); // -> 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s=cocktailName'\n          const data = await res.json();\n          const {drinks: drinkList} = data; // destructured form of: const drinkList = data.drinks;\n          return drinkList;\n        };\n  \n        setLoading(true);\n        try {\n          const promises = [];\n          for (const cocktailName of cocktailNames) {\n            promises.push(fetchCocktailList(cocktailName));\n          }\n          const drinkLists = await Promise.all(promises); // -> [[drink1, drink2], [drink3, drink4]]\n          const allDrinks = drinkLists.flat(1); // -> [drink1, drink2, drink3, drink4]\n          setCocktails(allDrinks);\n        }\n        catch (err) {\n          setErrorMessage(err.message /* or whatever custom message you want */);\n        }\n        setLoading(false);\n      };\n  \n      fetchCocktailLists(...cocktailNames);\n    }, [cocktailNames, setCocktails, setErrorMessage, setLoading]);\n  };\n\n  export default Drinks_API;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,sBAAsB;;AAGxC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,MAAMC,UAAU,GAAIC,KAAK,IAAK;EAAA;EAC1B,MAAM,CAACC,SAAS,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtD,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;;EAE9ED,SAAS,CAAC,MAAM;IACd,MAAMa,kBAAkB,GAAG,kBAA4B;MACrD,MAAMC,iBAAiB,GAAG,MAAOC,YAAY,IAAK;QAChD,MAAMC,OAAO,GAAG,wDAAwD;QACxE,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACF,OAAO,CAAC;QAC5B,MAAMG,MAAM,GAAG,IAAIC,eAAe,CAAC;UAACC,CAAC,EAAEN;QAAY,CAAC,CAAC;QACrDE,GAAG,CAACK,MAAM,GAAGH,MAAM,CAACI,QAAQ,EAAE,CAAC,CAAC;QAChC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACR,GAAG,CAACS,IAAI,CAAC,CAAC,CAAC;QACnC,MAAMC,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAI,EAAE;QAC7B,MAAM;UAACC,MAAM,EAAEC;QAAS,CAAC,GAAGH,IAAI,CAAC,CAAC;QAClC,OAAOG,SAAS;MAClB,CAAC;MAEDxB,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACF,MAAMyB,QAAQ,GAAG,EAAE;QAAC,kCAdapB,aAAa;UAAbA,aAAa;QAAA;QAe9C,KAAK,MAAMI,YAAY,IAAIJ,aAAa,EAAE;UACxCoB,QAAQ,CAACC,IAAI,CAAClB,iBAAiB,CAACC,YAAY,CAAC,CAAC;QAChD;QACA,MAAMkB,UAAU,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC,CAAC,CAAC;QAChD,MAAMK,SAAS,GAAGH,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACtC7B,YAAY,CAAC4B,SAAS,CAAC;MACzB,CAAC,CACD,OAAOE,GAAG,EAAE;QACV5B,eAAe,CAAC4B,GAAG,CAACC,OAAO,CAAC,0CAA0C;MACxE;;MACAjC,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;IAEDO,kBAAkB,CAAC,GAAGF,aAAa,CAAC;EACtC,CAAC,EAAE,CAACA,aAAa,EAAEH,YAAY,EAAEE,eAAe,EAAEJ,UAAU,CAAC,CAAC;AAChE,CAAC;AAAC,GArCEH,UAAU;AAAA,KAAVA,UAAU;AAuCd,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}